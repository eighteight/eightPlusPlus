// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "eightPlusPlus.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

// EightPlusPlusApp_t
//

EightPlusPlusApp_t::
EightPlusPlusApp_t ()
: ::xml_schema::Type (),
  mapper_ (::xml_schema::Flags (), this),
  tracker_ (::xml_schema::Flags (), this),
  media_ (::xml_schema::Flags (), this),
  link_ (::xml_schema::Flags (), this)
{
}

EightPlusPlusApp_t::
EightPlusPlusApp_t (const EightPlusPlusApp_t& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  mapper_ (x.mapper_, f, this),
  tracker_ (x.tracker_, f, this),
  media_ (x.media_, f, this),
  link_ (x.link_, f, this)
{
}

EightPlusPlusApp_t::
EightPlusPlusApp_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  mapper_ (f, this),
  tracker_ (f, this),
  media_ (f, this),
  link_ (f, this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void EightPlusPlusApp_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // mapper
    //
    if (n.name () == "mapper" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< MapperType > r (
        MapperTraits::create (i, f, this));

      this->mapper_.push_back (r);
      continue;
    }

    // tracker
    //
    if (n.name () == "tracker" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< TrackerType > r (
        TrackerTraits::create (i, f, this));

      if (!this->tracker_)
      {
        this->tracker_.set (r);
        continue;
      }
    }

    // media
    //
    if (n.name () == "media" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< MediaType > r (
        MediaTraits::create (i, f, this));

      this->media_.push_back (r);
      continue;
    }

    // link
    //
    if (n.name () == "link" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< LinkType > r (
        LinkTraits::create (i, f, this));

      this->link_.push_back (r);
      continue;
    }

    break;
  }
}

EightPlusPlusApp_t* EightPlusPlusApp_t::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class EightPlusPlusApp_t (*this, f, c);
}

EightPlusPlusApp_t::
~EightPlusPlusApp_t ()
{
}

// Linkable
//

Linkable::
Linkable ()
: ::xml_schema::Type (),
  Link_ (::xml_schema::Flags (), this)
{
}

Linkable::
Linkable (const Linkable& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Link_ (x.Link_, f, this)
{
}

Linkable::
Linkable (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Link_ (f, this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void Linkable::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Link
    //
    if (n.name () == "Link" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< LinkType > r (
        LinkTraits::create (i, f, this));

      this->Link_.push_back (r);
      continue;
    }

    break;
  }
}

Linkable* Linkable::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Linkable (*this, f, c);
}

Linkable::
~Linkable ()
{
}

// Medium
//

Medium::
Medium ()
: ::Linkable (),
  path_ (::xml_schema::Flags (), this),
  type_ (::xml_schema::Flags (), this)
{
}

Medium::
Medium (const Medium& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
: ::Linkable (x, f, c),
  path_ (x.path_, f, this),
  type_ (x.type_, f, this)
{
}

Medium::
Medium (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
: ::Linkable (e, f | ::xml_schema::Flags::base, c),
  path_ (f, this),
  type_ (f, this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void Medium::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  this->::Linkable::parse (p, f);

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "path" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< PathType > r (
        PathTraits::create (i, f, this));

      this->path_.set (r);
      continue;
    }

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< TypeType > r (
        TypeTraits::create (i, f, this));

      this->type_.set (r);
      continue;
    }
  }
}

Medium* Medium::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Medium (*this, f, c);
}

Medium::
~Medium ()
{
}

// Tracker
//

Tracker::
Tracker ()
: ::Linkable (),
  name_ (::xml_schema::Flags (), this),
  type_ (::xml_schema::Flags (), this)
{
}

Tracker::
Tracker (const Tracker& x,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
: ::Linkable (x, f, c),
  name_ (x.name_, f, this),
  type_ (x.type_, f, this)
{
}

Tracker::
Tracker (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f,
         ::xml_schema::Container* c)
: ::Linkable (e, f | ::xml_schema::Flags::base, c),
  name_ (f, this),
  type_ (f, this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void Tracker::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  this->::Linkable::parse (p, f);

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< NameType > r (
        NameTraits::create (i, f, this));

      this->name_.set (r);
      continue;
    }

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< TypeType > r (
        TypeTraits::create (i, f, this));

      this->type_.set (r);
      continue;
    }
  }
}

Tracker* Tracker::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Tracker (*this, f, c);
}

Tracker::
~Tracker ()
{
}

// Mapper
//

Mapper::
Mapper (const NameType& name,
        const XType& x,
        const YType& y,
        const WType& w,
        const HType& h,
        const WinX0Type& winX0,
        const WinY0Type& winY0,
        const WinX1Type& winX1,
        const WinY1Type& winY1)
: ::Linkable (),
  name_ (name, ::xml_schema::Flags (), this),
  x_ (x, ::xml_schema::Flags (), this),
  y_ (y, ::xml_schema::Flags (), this),
  w_ (w, ::xml_schema::Flags (), this),
  h_ (h, ::xml_schema::Flags (), this),
  winX0_ (winX0, ::xml_schema::Flags (), this),
  winY0_ (winY0, ::xml_schema::Flags (), this),
  winX1_ (winX1, ::xml_schema::Flags (), this),
  winY1_ (winY1, ::xml_schema::Flags (), this)
{
}

Mapper::
Mapper (const Mapper& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
: ::Linkable (x, f, c),
  name_ (x.name_, f, this),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  w_ (x.w_, f, this),
  h_ (x.h_, f, this),
  winX0_ (x.winX0_, f, this),
  winY0_ (x.winY0_, f, this),
  winX1_ (x.winX1_, f, this),
  winY1_ (x.winY1_, f, this)
{
}

Mapper::
Mapper (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
: ::Linkable (e, f | ::xml_schema::Flags::base, c),
  name_ (f, this),
  x_ (f, this),
  y_ (f, this),
  w_ (f, this),
  h_ (f, this),
  winX0_ (f, this),
  winY0_ (f, this),
  winX1_ (f, this),
  winY1_ (f, this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void Mapper::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  this->::Linkable::parse (p, f);

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< NameType > r (
        NameTraits::create (i, f, this));

      this->name_.set (r);
      continue;
    }

    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      this->x_.set (XTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      this->y_.set (YTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "w" && n.namespace_ ().empty ())
    {
      this->w_.set (WTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "h" && n.namespace_ ().empty ())
    {
      this->h_.set (HTraits::create (i, f, this));
      continue;
    }

    if (n.name () == "winX0" && n.namespace_ ().empty ())
    {
      this->winX0_.set (WinX0Traits::create (i, f, this));
      continue;
    }

    if (n.name () == "winY0" && n.namespace_ ().empty ())
    {
      this->winY0_.set (WinY0Traits::create (i, f, this));
      continue;
    }

    if (n.name () == "winX1" && n.namespace_ ().empty ())
    {
      this->winX1_.set (WinX1Traits::create (i, f, this));
      continue;
    }

    if (n.name () == "winY1" && n.namespace_ ().empty ())
    {
      this->winY1_.set (WinY1Traits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "y",
      "");
  }

  if (!w_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "w",
      "");
  }

  if (!h_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "h",
      "");
  }

  if (!winX0_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "winX0",
      "");
  }

  if (!winY0_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "winY0",
      "");
  }

  if (!winX1_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "winX1",
      "");
  }

  if (!winY1_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "winY1",
      "");
  }
}

Mapper* Mapper::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Mapper (*this, f, c);
}

Mapper::
~Mapper ()
{
}

// TrackerTypeDict
//

TrackerTypeDict::
TrackerTypeDict (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::String (e, f, c)
{
  _xsd_TrackerTypeDict_convert ();
}

TrackerTypeDict::
TrackerTypeDict (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::String (a, f, c)
{
  _xsd_TrackerTypeDict_convert ();
}

TrackerTypeDict::
TrackerTypeDict (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::String (s, e, f, c)
{
  _xsd_TrackerTypeDict_convert ();
}

TrackerTypeDict* TrackerTypeDict::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class TrackerTypeDict (*this, f, c);
}

TrackerTypeDict::Value TrackerTypeDict::
_xsd_TrackerTypeDict_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_TrackerTypeDict_literals_);
  const Value* i (::std::lower_bound (
                    _xsd_TrackerTypeDict_indexes_,
                    _xsd_TrackerTypeDict_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_TrackerTypeDict_indexes_ + 3 || _xsd_TrackerTypeDict_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const TrackerTypeDict::
_xsd_TrackerTypeDict_literals_[3] =
{
  "EasyTracker",
  "HandGestureTracker",
  "HandOpenCVTracker"
};

const TrackerTypeDict::Value TrackerTypeDict::
_xsd_TrackerTypeDict_indexes_[3] =
{
  ::TrackerTypeDict::EasyTracker,
  ::TrackerTypeDict::HandGestureTracker,
  ::TrackerTypeDict::HandOpenCVTracker
};

// MediumTypeDict
//

MediumTypeDict::
MediumTypeDict (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
: ::xml_schema::String (e, f, c)
{
  _xsd_MediumTypeDict_convert ();
}

MediumTypeDict::
MediumTypeDict (const ::xercesc::DOMAttr& a,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
: ::xml_schema::String (a, f, c)
{
  _xsd_MediumTypeDict_convert ();
}

MediumTypeDict::
MediumTypeDict (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
: ::xml_schema::String (s, e, f, c)
{
  _xsd_MediumTypeDict_convert ();
}

MediumTypeDict* MediumTypeDict::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class MediumTypeDict (*this, f, c);
}

MediumTypeDict::Value MediumTypeDict::
_xsd_MediumTypeDict_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_MediumTypeDict_literals_);
  const Value* i (::std::lower_bound (
                    _xsd_MediumTypeDict_indexes_,
                    _xsd_MediumTypeDict_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_MediumTypeDict_indexes_ + 2 || _xsd_MediumTypeDict_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const MediumTypeDict::
_xsd_MediumTypeDict_literals_[2] =
{
  "video",
  "image"
};

const MediumTypeDict::Value MediumTypeDict::
_xsd_MediumTypeDict_indexes_[2] =
{
  ::MediumTypeDict::image,
  ::MediumTypeDict::video
};

// Link
//

Link::
Link (const SourceType& Source,
      const TargetType& Target)
: ::xml_schema::Type (),
  Source_ (Source, ::xml_schema::Flags (), this),
  Target_ (Target, ::xml_schema::Flags (), this)
{
}

Link::
Link (const Link& x,
      ::xml_schema::Flags f,
      ::xml_schema::Container* c)
: ::xml_schema::Type (x, f, c),
  Source_ (x.Source_, f, this),
  Target_ (x.Target_, f, this)
{
}

Link::
Link (const ::xercesc::DOMElement& e,
      ::xml_schema::Flags f,
      ::xml_schema::Container* c)
: ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
  Source_ (f, this),
  Target_ (f, this)
{
  if ((f & ::xml_schema::Flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void Link::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::Flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "Source" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< SourceType > r (
        SourceTraits::create (i, f, this));

      this->Source_.set (r);
      continue;
    }

    if (n.name () == "Target" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< TargetType > r (
        TargetTraits::create (i, f, this));

      this->Target_.set (r);
      continue;
    }
  }

  if (!Source_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Source",
      "");
  }

  if (!Target_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "Target",
      "");
  }
}

Link* Link::
_clone (::xml_schema::Flags f,
        ::xml_schema::Container* c) const
{
  return new class Link (*this, f, c);
}

Link::
~Link ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::EightPlusPlusApp_t > r (
    ::parseEightPlusPlusApp (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::EightPlusPlusApp_t > r (
    ::parseEightPlusPlusApp (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::EightPlusPlusApp_t > r (
    ::parseEightPlusPlusApp (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::parseEightPlusPlusApp (isrc, f, p);
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::parseEightPlusPlusApp (isrc, h, f, p);
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::parseEightPlusPlusApp (isrc, h, f, p);
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::parseEightPlusPlusApp (isrc, f, p);
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::Flags::dont_initialize) == 0,
    (f & ::xml_schema::Flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::parseEightPlusPlusApp (isrc, h, f, p);
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::parseEightPlusPlusApp (isrc, h, f, p);
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::EightPlusPlusApp_t > r (
    ::parseEightPlusPlusApp (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::EightPlusPlusApp_t > r (
    ::parseEightPlusPlusApp (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::EightPlusPlusApp_t > r (
    ::parseEightPlusPlusApp (
      d, f | ::xml_schema::Flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
{
  if (f & ::xml_schema::Flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::EightPlusPlusApp_t > r (
      ::parseEightPlusPlusApp (
        c, f | ::xml_schema::Flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "eightPlusPlusApp" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::EightPlusPlusApp_t > r (
      ::xsd::cxx::tree::traits< ::EightPlusPlusApp_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "eightPlusPlusApp",
    "");
}

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::Flags::keep_dom) &&
     !(f & ::xml_schema::Flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::Flags::keep_dom)
    doc.setUserData (::xml_schema::dom::treeNodeKey,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "eightPlusPlusApp" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::EightPlusPlusApp_t > r (
      ::xsd::cxx::tree::traits< ::EightPlusPlusApp_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "eightPlusPlusApp",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

