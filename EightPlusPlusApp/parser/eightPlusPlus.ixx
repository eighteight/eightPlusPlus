// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___PARSER_EIGHT_PLUS_PLUS_IXX
#define CXX___PARSER_EIGHT_PLUS_PLUS_IXX

// Begin prologue.
//
//
// End prologue.

// EightPlusPlusApp_t
// 

inline
const EightPlusPlusApp_t::MapperSequence& EightPlusPlusApp_t::
getMapper () const
{
  return this->mapper_;
}

inline
EightPlusPlusApp_t::MapperSequence& EightPlusPlusApp_t::
getMapper ()
{
  return this->mapper_;
}

inline
void EightPlusPlusApp_t::
setMapper (const MapperSequence& s)
{
  this->mapper_ = s;
}

inline
const EightPlusPlusApp_t::TrackerOptional& EightPlusPlusApp_t::
getTracker () const
{
  return this->tracker_;
}

inline
EightPlusPlusApp_t::TrackerOptional& EightPlusPlusApp_t::
getTracker ()
{
  return this->tracker_;
}

inline
void EightPlusPlusApp_t::
setTracker (const TrackerType& x)
{
  this->tracker_.set (x);
}

inline
void EightPlusPlusApp_t::
setTracker (const TrackerOptional& x)
{
  this->tracker_ = x;
}

inline
void EightPlusPlusApp_t::
setTracker (::std::auto_ptr< TrackerType > x)
{
  this->tracker_.set (x);
}

inline
const EightPlusPlusApp_t::MediaSequence& EightPlusPlusApp_t::
getMedia () const
{
  return this->media_;
}

inline
EightPlusPlusApp_t::MediaSequence& EightPlusPlusApp_t::
getMedia ()
{
  return this->media_;
}

inline
void EightPlusPlusApp_t::
setMedia (const MediaSequence& s)
{
  this->media_ = s;
}

inline
const EightPlusPlusApp_t::LinkSequence& EightPlusPlusApp_t::
getLink () const
{
  return this->link_;
}

inline
EightPlusPlusApp_t::LinkSequence& EightPlusPlusApp_t::
getLink ()
{
  return this->link_;
}

inline
void EightPlusPlusApp_t::
setLink (const LinkSequence& s)
{
  this->link_ = s;
}


// Linkable
// 

inline
const Linkable::LinkSequence& Linkable::
getLink () const
{
  return this->Link_;
}

inline
Linkable::LinkSequence& Linkable::
getLink ()
{
  return this->Link_;
}

inline
void Linkable::
setLink (const LinkSequence& s)
{
  this->Link_ = s;
}


// Medium
// 

inline
const Medium::PathOptional& Medium::
getPath () const
{
  return this->path_;
}

inline
Medium::PathOptional& Medium::
getPath ()
{
  return this->path_;
}

inline
void Medium::
setPath (const PathType& x)
{
  this->path_.set (x);
}

inline
void Medium::
setPath (const PathOptional& x)
{
  this->path_ = x;
}

inline
void Medium::
setPath (::std::auto_ptr< PathType > x)
{
  this->path_.set (x);
}

inline
const Medium::TypeOptional& Medium::
getType () const
{
  return this->type_;
}

inline
Medium::TypeOptional& Medium::
getType ()
{
  return this->type_;
}

inline
void Medium::
setType (const TypeType& x)
{
  this->type_.set (x);
}

inline
void Medium::
setType (const TypeOptional& x)
{
  this->type_ = x;
}

inline
void Medium::
setType (::std::auto_ptr< TypeType > x)
{
  this->type_.set (x);
}


// Tracker
// 

inline
const Tracker::NameOptional& Tracker::
getName () const
{
  return this->name_;
}

inline
Tracker::NameOptional& Tracker::
getName ()
{
  return this->name_;
}

inline
void Tracker::
setName (const NameType& x)
{
  this->name_.set (x);
}

inline
void Tracker::
setName (const NameOptional& x)
{
  this->name_ = x;
}

inline
void Tracker::
setName (::std::auto_ptr< NameType > x)
{
  this->name_.set (x);
}

inline
const Tracker::TypeOptional& Tracker::
getType () const
{
  return this->type_;
}

inline
Tracker::TypeOptional& Tracker::
getType ()
{
  return this->type_;
}

inline
void Tracker::
setType (const TypeType& x)
{
  this->type_.set (x);
}

inline
void Tracker::
setType (const TypeOptional& x)
{
  this->type_ = x;
}

inline
void Tracker::
setType (::std::auto_ptr< TypeType > x)
{
  this->type_.set (x);
}


// Mapper
// 

inline
const Mapper::NameType& Mapper::
getName () const
{
  return this->name_.get ();
}

inline
Mapper::NameType& Mapper::
getName ()
{
  return this->name_.get ();
}

inline
void Mapper::
setName (const NameType& x)
{
  this->name_.set (x);
}

inline
void Mapper::
setName (::std::auto_ptr< NameType > x)
{
  this->name_.set (x);
}

inline
const Mapper::XType& Mapper::
getX () const
{
  return this->x_.get ();
}

inline
Mapper::XType& Mapper::
getX ()
{
  return this->x_.get ();
}

inline
void Mapper::
setX (const XType& x)
{
  this->x_.set (x);
}

inline
const Mapper::YType& Mapper::
getY () const
{
  return this->y_.get ();
}

inline
Mapper::YType& Mapper::
getY ()
{
  return this->y_.get ();
}

inline
void Mapper::
setY (const YType& x)
{
  this->y_.set (x);
}

inline
const Mapper::WType& Mapper::
getW () const
{
  return this->w_.get ();
}

inline
Mapper::WType& Mapper::
getW ()
{
  return this->w_.get ();
}

inline
void Mapper::
setW (const WType& x)
{
  this->w_.set (x);
}

inline
const Mapper::HType& Mapper::
getH () const
{
  return this->h_.get ();
}

inline
Mapper::HType& Mapper::
getH ()
{
  return this->h_.get ();
}

inline
void Mapper::
setH (const HType& x)
{
  this->h_.set (x);
}

inline
const Mapper::WinX0Type& Mapper::
getWinX0 () const
{
  return this->winX0_.get ();
}

inline
Mapper::WinX0Type& Mapper::
getWinX0 ()
{
  return this->winX0_.get ();
}

inline
void Mapper::
setWinX0 (const WinX0Type& x)
{
  this->winX0_.set (x);
}

inline
const Mapper::WinY0Type& Mapper::
getWinY0 () const
{
  return this->winY0_.get ();
}

inline
Mapper::WinY0Type& Mapper::
getWinY0 ()
{
  return this->winY0_.get ();
}

inline
void Mapper::
setWinY0 (const WinY0Type& x)
{
  this->winY0_.set (x);
}

inline
const Mapper::WinX1Type& Mapper::
getWinX1 () const
{
  return this->winX1_.get ();
}

inline
Mapper::WinX1Type& Mapper::
getWinX1 ()
{
  return this->winX1_.get ();
}

inline
void Mapper::
setWinX1 (const WinX1Type& x)
{
  this->winX1_.set (x);
}

inline
const Mapper::WinY1Type& Mapper::
getWinY1 () const
{
  return this->winY1_.get ();
}

inline
Mapper::WinY1Type& Mapper::
getWinY1 ()
{
  return this->winY1_.get ();
}

inline
void Mapper::
setWinY1 (const WinY1Type& x)
{
  this->winY1_.set (x);
}


// TrackerTypeDict
// 

inline
TrackerTypeDict::
TrackerTypeDict (Value v)
: ::xml_schema::String (_xsd_TrackerTypeDict_literals_[v])
{
}

inline
TrackerTypeDict::
TrackerTypeDict (const char* v)
: ::xml_schema::String (v)
{
}

inline
TrackerTypeDict::
TrackerTypeDict (const ::std::string& v)
: ::xml_schema::String (v)
{
}

inline
TrackerTypeDict::
TrackerTypeDict (const ::xml_schema::String& v)
: ::xml_schema::String (v)
{
}

inline
TrackerTypeDict::
TrackerTypeDict (const TrackerTypeDict& v,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
: ::xml_schema::String (v, f, c)
{
}

inline
TrackerTypeDict& TrackerTypeDict::
operator= (Value v)
{
  static_cast< ::xml_schema::String& > (*this) = 
  ::xml_schema::String (_xsd_TrackerTypeDict_literals_[v]);

  return *this;
}


// MediumTypeDict
// 

inline
MediumTypeDict::
MediumTypeDict (Value v)
: ::xml_schema::String (_xsd_MediumTypeDict_literals_[v])
{
}

inline
MediumTypeDict::
MediumTypeDict (const char* v)
: ::xml_schema::String (v)
{
}

inline
MediumTypeDict::
MediumTypeDict (const ::std::string& v)
: ::xml_schema::String (v)
{
}

inline
MediumTypeDict::
MediumTypeDict (const ::xml_schema::String& v)
: ::xml_schema::String (v)
{
}

inline
MediumTypeDict::
MediumTypeDict (const MediumTypeDict& v,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
: ::xml_schema::String (v, f, c)
{
}

inline
MediumTypeDict& MediumTypeDict::
operator= (Value v)
{
  static_cast< ::xml_schema::String& > (*this) = 
  ::xml_schema::String (_xsd_MediumTypeDict_literals_[v]);

  return *this;
}


// Link
// 

inline
const Link::SourceType& Link::
getSource () const
{
  return this->Source_.get ();
}

inline
Link::SourceType& Link::
getSource ()
{
  return this->Source_.get ();
}

inline
void Link::
setSource (const SourceType& x)
{
  this->Source_.set (x);
}

inline
void Link::
setSource (::std::auto_ptr< SourceType > x)
{
  this->Source_.set (x);
}

inline
const Link::TargetType& Link::
getTarget () const
{
  return this->Target_.get ();
}

inline
Link::TargetType& Link::
getTarget ()
{
  return this->Target_.get ();
}

inline
void Link::
setTarget (const TargetType& x)
{
  this->Target_.set (x);
}

inline
void Link::
setTarget (::std::auto_ptr< TargetType > x)
{
  this->Target_.set (x);
}


// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___PARSER_EIGHT_PLUS_PLUS_IXX
