// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___PARSER_EIGHT_PLUS_PLUS_HXX
#define CXX___PARSER_EIGHT_PLUS_PLUS_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type Type;
  typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;
  typedef ::xsd::cxx::tree::type Container;

  // 8-bit
  //
  typedef signed char Byte;
  typedef unsigned char UnsignedByte;

  // 16-bit
  //
  typedef short Short;
  typedef unsigned short UnsignedShort;

  // 32-bit
  //
  typedef int Int;
  typedef unsigned int UnsignedInt;

  // 64-bit
  //
  typedef long long Long;
  typedef unsigned long long UnsignedLong;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long Integer;
  typedef long long NonPositiveInteger;
  typedef unsigned long long NonNegativeInteger;
  typedef unsigned long long PositiveInteger;
  typedef long long NegativeInteger;

  // Boolean.
  //
  typedef bool Boolean;

  // Floating-point types.
  //
  typedef float Float;
  typedef double Double;
  typedef double Decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;
  typedef ::xsd::cxx::tree::name< char, Token > Name;
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;
  typedef ::xsd::cxx::tree::language< char, Token > Language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > Buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone TimeZone;
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;
  typedef ::xsd::cxx::tree::list_stream< char > ListStream;
  typedef ::xsd::cxx::tree::as_double< Double > AsDouble;
  typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags Flags;
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity Severity;
  typedef ::xsd::cxx::tree::error< char > Error;
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > Exception;
  typedef ::xsd::cxx::tree::bounds< char > Bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;
  typedef ::xsd::cxx::tree::parsing< char > Parsing;
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;
  typedef ::xsd::cxx::tree::no_type_info< char > NoTypeInfo;
  typedef ::xsd::cxx::tree::not_derived< char > NotDerived;
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class EightPlusPlusApp_t;
class Linkable;
class Medium;
class Tracker;
class Mapper;
class TrackerTypeDict;
class MediumTypeDict;
class Link;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#undef XSD_DONT_INCLUDE_INLINE
#else

#endif // XSD_DONT_INCLUDE_INLINE

class EightPlusPlusApp_t: public ::xml_schema::Type
{
  public:
  // mapper
  // 
  typedef ::Mapper MapperType;
  typedef ::xsd::cxx::tree::sequence< MapperType > MapperSequence;
  typedef MapperSequence::iterator MapperIterator;
  typedef MapperSequence::const_iterator MapperConstIterator;
  typedef ::xsd::cxx::tree::traits< MapperType, char > MapperTraits;

  const MapperSequence&
  getMapper () const;

  MapperSequence&
  getMapper ();

  void
  setMapper (const MapperSequence& s);

  // tracker
  // 
  typedef ::Tracker TrackerType;
  typedef ::xsd::cxx::tree::optional< TrackerType > TrackerOptional;
  typedef ::xsd::cxx::tree::traits< TrackerType, char > TrackerTraits;

  const TrackerOptional&
  getTracker () const;

  TrackerOptional&
  getTracker ();

  void
  setTracker (const TrackerType& x);

  void
  setTracker (const TrackerOptional& x);

  void
  setTracker (::std::auto_ptr< TrackerType > p);

  // media
  // 
  typedef ::Medium MediaType;
  typedef ::xsd::cxx::tree::sequence< MediaType > MediaSequence;
  typedef MediaSequence::iterator MediaIterator;
  typedef MediaSequence::const_iterator MediaConstIterator;
  typedef ::xsd::cxx::tree::traits< MediaType, char > MediaTraits;

  const MediaSequence&
  getMedia () const;

  MediaSequence&
  getMedia ();

  void
  setMedia (const MediaSequence& s);

  // link
  // 
  typedef ::Link LinkType;
  typedef ::xsd::cxx::tree::sequence< LinkType > LinkSequence;
  typedef LinkSequence::iterator LinkIterator;
  typedef LinkSequence::const_iterator LinkConstIterator;
  typedef ::xsd::cxx::tree::traits< LinkType, char > LinkTraits;

  const LinkSequence&
  getLink () const;

  LinkSequence&
  getLink ();

  void
  setLink (const LinkSequence& s);

  // Constructors.
  //
  EightPlusPlusApp_t ();

  EightPlusPlusApp_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

  EightPlusPlusApp_t (const EightPlusPlusApp_t& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

  virtual EightPlusPlusApp_t*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  virtual 
  ~EightPlusPlusApp_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  MapperSequence mapper_;
  TrackerOptional tracker_;
  MediaSequence media_;
  LinkSequence link_;
};

class Linkable: public ::xml_schema::Type
{
  public:
  // Link
  // 
  typedef ::Link LinkType;
  typedef ::xsd::cxx::tree::sequence< LinkType > LinkSequence;
  typedef LinkSequence::iterator LinkIterator;
  typedef LinkSequence::const_iterator LinkConstIterator;
  typedef ::xsd::cxx::tree::traits< LinkType, char > LinkTraits;

  const LinkSequence&
  getLink () const;

  LinkSequence&
  getLink ();

  void
  setLink (const LinkSequence& s);

  // Constructors.
  //
  Linkable ();

  Linkable (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

  Linkable (const Linkable& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

  virtual Linkable*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  virtual 
  ~Linkable ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  LinkSequence Link_;
};

class Medium: public ::Linkable
{
  public:
  // path
  // 
  typedef ::xml_schema::String PathType;
  typedef ::xsd::cxx::tree::optional< PathType > PathOptional;
  typedef ::xsd::cxx::tree::traits< PathType, char > PathTraits;

  const PathOptional&
  getPath () const;

  PathOptional&
  getPath ();

  void
  setPath (const PathType& x);

  void
  setPath (const PathOptional& x);

  void
  setPath (::std::auto_ptr< PathType > p);

  // type
  // 
  typedef ::MediumTypeDict TypeType;
  typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;
  typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

  const TypeOptional&
  getType () const;

  TypeOptional&
  getType ();

  void
  setType (const TypeType& x);

  void
  setType (const TypeOptional& x);

  void
  setType (::std::auto_ptr< TypeType > p);

  // Constructors.
  //
  Medium ();

  Medium (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

  Medium (const Medium& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

  virtual Medium*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  virtual 
  ~Medium ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  PathOptional path_;
  TypeOptional type_;
};

class Tracker: public ::Linkable
{
  public:
  // name
  // 
  typedef ::xml_schema::String NameType;
  typedef ::xsd::cxx::tree::optional< NameType > NameOptional;
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  const NameOptional&
  getName () const;

  NameOptional&
  getName ();

  void
  setName (const NameType& x);

  void
  setName (const NameOptional& x);

  void
  setName (::std::auto_ptr< NameType > p);

  // type
  // 
  typedef ::TrackerTypeDict TypeType;
  typedef ::xsd::cxx::tree::optional< TypeType > TypeOptional;
  typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

  const TypeOptional&
  getType () const;

  TypeOptional&
  getType ();

  void
  setType (const TypeType& x);

  void
  setType (const TypeOptional& x);

  void
  setType (::std::auto_ptr< TypeType > p);

  // Constructors.
  //
  Tracker ();

  Tracker (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

  Tracker (const Tracker& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

  virtual Tracker*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  virtual 
  ~Tracker ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  NameOptional name_;
  TypeOptional type_;
};

class Mapper: public ::Linkable
{
  public:
  // name
  // 
  typedef ::xml_schema::String NameType;
  typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

  const NameType&
  getName () const;

  NameType&
  getName ();

  void
  setName (const NameType& x);

  void
  setName (::std::auto_ptr< NameType > p);

  // x
  // 
  typedef ::xml_schema::Int XType;
  typedef ::xsd::cxx::tree::traits< XType, char > XTraits;

  const XType&
  getX () const;

  XType&
  getX ();

  void
  setX (const XType& x);

  // y
  // 
  typedef ::xml_schema::Int YType;
  typedef ::xsd::cxx::tree::traits< YType, char > YTraits;

  const YType&
  getY () const;

  YType&
  getY ();

  void
  setY (const YType& x);

  // w
  // 
  typedef ::xml_schema::Int WType;
  typedef ::xsd::cxx::tree::traits< WType, char > WTraits;

  const WType&
  getW () const;

  WType&
  getW ();

  void
  setW (const WType& x);

  // h
  // 
  typedef ::xml_schema::Int HType;
  typedef ::xsd::cxx::tree::traits< HType, char > HTraits;

  const HType&
  getH () const;

  HType&
  getH ();

  void
  setH (const HType& x);

  // winX0
  // 
  typedef ::xml_schema::Float WinX0Type;
  typedef ::xsd::cxx::tree::traits< WinX0Type, char > WinX0Traits;

  const WinX0Type&
  getWinX0 () const;

  WinX0Type&
  getWinX0 ();

  void
  setWinX0 (const WinX0Type& x);

  // winY0
  // 
  typedef ::xml_schema::Float WinY0Type;
  typedef ::xsd::cxx::tree::traits< WinY0Type, char > WinY0Traits;

  const WinY0Type&
  getWinY0 () const;

  WinY0Type&
  getWinY0 ();

  void
  setWinY0 (const WinY0Type& x);

  // winX1
  // 
  typedef ::xml_schema::Float WinX1Type;
  typedef ::xsd::cxx::tree::traits< WinX1Type, char > WinX1Traits;

  const WinX1Type&
  getWinX1 () const;

  WinX1Type&
  getWinX1 ();

  void
  setWinX1 (const WinX1Type& x);

  // winY1
  // 
  typedef ::xml_schema::Float WinY1Type;
  typedef ::xsd::cxx::tree::traits< WinY1Type, char > WinY1Traits;

  const WinY1Type&
  getWinY1 () const;

  WinY1Type&
  getWinY1 ();

  void
  setWinY1 (const WinY1Type& x);

  // Constructors.
  //
  Mapper (const NameType&,
          const XType&,
          const YType&,
          const WType&,
          const HType&,
          const WinX0Type&,
          const WinY0Type&,
          const WinX1Type&,
          const WinY1Type&);

  Mapper (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

  Mapper (const Mapper& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

  virtual Mapper*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  virtual 
  ~Mapper ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< NameType > name_;
  ::xsd::cxx::tree::one< XType > x_;
  ::xsd::cxx::tree::one< YType > y_;
  ::xsd::cxx::tree::one< WType > w_;
  ::xsd::cxx::tree::one< HType > h_;
  ::xsd::cxx::tree::one< WinX0Type > winX0_;
  ::xsd::cxx::tree::one< WinY0Type > winY0_;
  ::xsd::cxx::tree::one< WinX1Type > winX1_;
  ::xsd::cxx::tree::one< WinY1Type > winY1_;
};

class TrackerTypeDict: public ::xml_schema::String
{
  public:
  enum Value
  {
    EasyTracker,
    HandGestureTracker,
    HandOpenCVTracker
  };

  TrackerTypeDict (Value v);

  TrackerTypeDict (const char* v);

  TrackerTypeDict (const ::std::string& v);

  TrackerTypeDict (const ::xml_schema::String& v);

  TrackerTypeDict (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

  TrackerTypeDict (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

  TrackerTypeDict (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

  TrackerTypeDict (const TrackerTypeDict& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

  virtual TrackerTypeDict*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  TrackerTypeDict&
  operator= (Value v);

  virtual
  operator Value () const
  {
    return _xsd_TrackerTypeDict_convert ();
  }

  protected:
  Value
  _xsd_TrackerTypeDict_convert () const;

  public:
  static const char* const _xsd_TrackerTypeDict_literals_[3];
  static const Value _xsd_TrackerTypeDict_indexes_[3];
};

class MediumTypeDict: public ::xml_schema::String
{
  public:
  enum Value
  {
    video,
    image
  };

  MediumTypeDict (Value v);

  MediumTypeDict (const char* v);

  MediumTypeDict (const ::std::string& v);

  MediumTypeDict (const ::xml_schema::String& v);

  MediumTypeDict (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

  MediumTypeDict (const ::xercesc::DOMAttr& a,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

  MediumTypeDict (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

  MediumTypeDict (const MediumTypeDict& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

  virtual MediumTypeDict*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  MediumTypeDict&
  operator= (Value v);

  virtual
  operator Value () const
  {
    return _xsd_MediumTypeDict_convert ();
  }

  protected:
  Value
  _xsd_MediumTypeDict_convert () const;

  public:
  static const char* const _xsd_MediumTypeDict_literals_[2];
  static const Value _xsd_MediumTypeDict_indexes_[2];
};

class Link: public ::xml_schema::Type
{
  public:
  // Source
  // 
  typedef ::xml_schema::Uri SourceType;
  typedef ::xsd::cxx::tree::traits< SourceType, char > SourceTraits;

  const SourceType&
  getSource () const;

  SourceType&
  getSource ();

  void
  setSource (const SourceType& x);

  void
  setSource (::std::auto_ptr< SourceType > p);

  // Target
  // 
  typedef ::xml_schema::Uri TargetType;
  typedef ::xsd::cxx::tree::traits< TargetType, char > TargetTraits;

  const TargetType&
  getTarget () const;

  TargetType&
  getTarget ();

  void
  setTarget (const TargetType& x);

  void
  setTarget (::std::auto_ptr< TargetType > p);

  // Constructors.
  //
  Link (const SourceType&,
        const TargetType&);

  Link (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

  Link (const Link& x,
        ::xml_schema::Flags f = 0,
        ::xml_schema::Container* c = 0);

  virtual Link*
  _clone (::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0) const;

  virtual 
  ~Link ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::Flags);

  protected:
  ::xsd::cxx::tree::one< SourceType > Source_;
  ::xsd::cxx::tree::one< TargetType > Target_;
};

#ifndef XSD_DONT_INCLUDE_INLINE

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (const ::std::string& uri,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (const ::std::string& uri,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

// Parse std::istream.
//

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::xercesc::InputSource& is,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::xercesc::InputSource& is,
                       ::xml_schema::ErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

::std::auto_ptr< ::EightPlusPlusApp_t >
parseEightPlusPlusApp (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::Flags f = 0,
                       const ::xml_schema::Properties& p = ::xml_schema::Properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

void
operator<< (::xercesc::DOMElement&, const EightPlusPlusApp_t&);

// Serialize to std::ostream.
//

void
serializeEightPlusPlusApp (::std::ostream& os,
                           const ::EightPlusPlusApp_t& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

void
serializeEightPlusPlusApp (::std::ostream& os,
                           const ::EightPlusPlusApp_t& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

void
serializeEightPlusPlusApp (::std::ostream& os,
                           const ::EightPlusPlusApp_t& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
serializeEightPlusPlusApp (::xercesc::XMLFormatTarget& ft,
                           const ::EightPlusPlusApp_t& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

void
serializeEightPlusPlusApp (::xercesc::XMLFormatTarget& ft,
                           const ::EightPlusPlusApp_t& x, 
                           ::xml_schema::ErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

void
serializeEightPlusPlusApp (::xercesc::XMLFormatTarget& ft,
                           const ::EightPlusPlusApp_t& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::Flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
serializeEightPlusPlusApp (::xercesc::DOMDocument& d,
                           const ::EightPlusPlusApp_t& x,
                           ::xml_schema::Flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
serializeEightPlusPlusApp (const ::EightPlusPlusApp_t& x, 
                           const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                           ::xml_schema::Flags f = 0);

void
operator<< (::xercesc::DOMElement&, const Linkable&);

void
operator<< (::xercesc::DOMElement&, const Medium&);

void
operator<< (::xercesc::DOMElement&, const Tracker&);

void
operator<< (::xercesc::DOMElement&, const Mapper&);

void
operator<< (::xercesc::DOMElement&, const TrackerTypeDict&);

void
operator<< (::xercesc::DOMAttr&, const TrackerTypeDict&);

void
operator<< (::xml_schema::ListStream&,
            const TrackerTypeDict&);

void
operator<< (::xercesc::DOMElement&, const MediumTypeDict&);

void
operator<< (::xercesc::DOMAttr&, const MediumTypeDict&);

void
operator<< (::xml_schema::ListStream&,
            const MediumTypeDict&);

void
operator<< (::xercesc::DOMElement&, const Link&);

#ifndef XSD_DONT_INCLUDE_INLINE
#include "eightPlusPlus.ixx"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___PARSER_EIGHT_PLUS_PLUS_HXX
